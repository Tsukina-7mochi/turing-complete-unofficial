{
  dependencies: {
    crude_awakening: [],
    nand_gate: ['Crude Awakening'],
    not_gate: ['NAND Gate'],
    and_gate: ['NOT Gate'],
    nor_gate: ['NOT Gate'],
    or_gate: ['NOT Gate'],
    always_on: ['AND Gate', 'NOR Gate', 'OR Gate'],
    second_tick: ['Always On'],
    xor_gate: ['Second Tick'],
    bigger_or_gate: ['XOR Gate'],
    bigger_and_gate: ['XOR Gate'],
    xnor_gate: ['Bigger OR Gate', 'Bigger AND Gate'],
    binary_racer: ['Bigger OR Gate'],
    double_trouble: ['Bigger OR Gate'],
    odd_number_of_signals: ['Bigger OR Gate', 'Bigger AND Gate', 'XNOR Gate'],
    counting_signals: ['Binary Racer', 'Double Trouble', 'ODD Number of Signals'],
    half_adder: ['ODD Number of Signals'],
    double_the_number: ['Counting Signals'],
    full_adder: ['Half Adder'],
    byte_or: ['Double the Number'],
    byte_not: ['Double the Number'],
    adding_bytes: ['Double the Number', 'Full Adder'],
    negative_numbers: ['Byte OR', 'Byte Not', 'Adding Bytes'],
    bit_switch: ['Adding Bytes'],
    the_bus: ['Bit Switch'],
    signed_negator: ['Negative Numbers'],
    '1_bit_decoder': ['Saving Bytes'],
    '3_bit_decoder': ['Saving Bytes', '1 bit decoder'],
    one_way: ['3 bit decoder'],
    circular_dependency: ['Bigger AND Gate'],
    further_delayed_lines: ['Circular Dependency'],
    odd_ticks: ['Further Delayed Lines'],
    saving_gracefully: ['Odd ticks'],
    sr_latch: ['Odd ticks'],
    bit_inverter: ['Saving Gracefully'],
    input_selector: ['The Bus', 'Bit Inverter'],
    saving_bytes: ['Saving Bytes'],
    little_box: ['1 bit decoder', 'Saving Bytes'],
    counter: ['Saving Bytes'],
    logic_engine: ['Signed Negator', '3 Bit Decoder'],
    arithmetic_engine: ['Logic Engine'],
    registers: ['3 Bit Decoder'],
    component_factory: ['Arithmetic Engine'],
    instruction_decoder: ['Component Factory', 'Registers'],
    calculations: ['Instruction Decoder', 'One Way'],
    conditions: ['Component Factory'],
    program: ['Calculations', 'Little Box', 'Counter'],
    immediate_values_cpu_architecture: ['Program'],
    turing_complete: ['Conditions', 'Immediate Values (CPU Architecture)'],
    add_5: ['Turing Complete'],
    calibrating_laser_cannons: ['Add 5'],
    spacial_invasion: ['Calibrating Laser Cannons'],
    storage_cracker: ['Calibrating Laser Cannons'],
    masking_time: ['Calibrating Laser Cannons'],
    the_maze: ['Special Invasion', 'Storage Cracker', 'Masking Time'],
    xor: ['The Maze'],
    byte_constant: ['The Maze'],
    byte_and: ['The Maze'],
    byte_xor: ['XOR'],
    equality: ['Byte Constant'],
    unsigned_less: ['Byte XOR', 'Equality', 'Byte AND'],
    signed_less: ['Byte XOR', 'Equality', 'Byte AND'],
    wide_instructions: ['signed_less', 'unsigned_less'],
    wire_spaghetti: ['wide_instructions'],
    opcodes: ['Wire Spaghetti'],
    immediate_values_cpu_architecture_2: ['Opcodes'],
    conditionals: ['Immediate Values (CPU Architecture 2)'],
    the_sandbox: ['Conditionals'],
    shift: ['Conditionals'],
    the_lab: ['Conditionals'],
    delay: ['Conditionals'],
    the_product_pf_nibbles: ['Shift'],
    ram: ['Conditionals'],
    divide: ['The Product of Nibbles'],
    stack: ['ram'],
    push_and_pop: ['stack'],
    functions: ['PUSH and POP'],
    ai_showdown: ['Conditionals'],
    robot_racing: ['Functions'],
    unseen_fruit: ['RAM'],
    delicious_order: ['RAM'],
    dancing_machine: ['Stack'],
    tower_of_alloy: ['Robot Racing'],
    planet_names: ['Stack'],
    water_world: ['Tower of Alloy'],
  },
}